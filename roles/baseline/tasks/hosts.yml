---

- name: create empty ip list
  set_fact: 
    _ip_list: []
    _host_list: []

- name: add ip address with hostnames 
  set_fact:
    _ip_list: "{{(_ip_list + [hostvars[item]._ip_address])|unique}}"
    _host_list: "{{(_host_list + [ { 'ip': hostvars[item]._ip_address, 'fqdn': item } ]) }}"
  with_items: "{{ groups['all'] }}"

- name: add ip address with hostnames + domain
  set_fact:
    _host_list: "{{(_host_list + [ { 'ip': hostvars[item]._ip_address, 'fqdn': item + '.' +_domain } ]) }}"
  with_items: "{{ groups['all'] }}"

- debug:
    msg: "_fqdn: ip:{{item.ip}} <-> fqdn:{{item.fqdn}}" 
  with_items: "{{_fqdns}}"

- name: add ip address with fqdns
  set_fact:
    _ip_list: "{{(_ip_list + [item.ip])|unique}}"
    _host_list: "{{(_host_list + [ { 'ip': item.ip, 'fqdn': item.fqdn } ]) }}"
  with_items: "{{ _fqdns }}"

- debug:
    msg: "_host_list: ip:{{item.ip}} -->> fqdn:{{item.fqdn}}" 
  with_items: "{{_host_list}}"
  when: 
    - 'item.ip is defined'
    - 'item.fqdn is defined'

- debug:
    msg: "_ip_list:{{item.ip}}" 
  with_items: "{{_ip_list}}"
  when: 
   - 'item.ip is defined'

- debug:
    msg: "_host_list:{{item.ip}} , {{item.fqdn}}" 
  with_items: "{{_host_list}}"
  when:
    - 'item.ip is defined'
    - 'item.fqdn is defined'

- name: "insert ip in /etc/hosts"
  lineinfile:
    dest: '/etc/hosts'
    regexp: '^{{hostvars[item]._ip_address}}[^\d]'
    state: present
    line: '{{hostvars[item]._ip_address}} {{item}}'
  with_items: "{{groups['all']}}"
  become: true

- name: insert ip + fqdn in /etc/hosts
  replace: 
    dest: '/etc/hosts'
    regexp: '^({{item[1].ip}}\s+(?!.*\b{{item[1].fqdn}}\b).*)$'
    replace: '\1 {{item[1].fqdn}}'
  become: true
  with_nested:
     - "{{_ip_list}}"
     - "{{_host_list}}"
  when: 
    - 'item[0] is defined'
    - 'item[1].ip is defined'
    - 'item[1].fqdn is defined'
    - 'item[0] == item[1].ip'
