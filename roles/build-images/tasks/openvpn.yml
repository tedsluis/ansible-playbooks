---

- name: set external and internal
  set_fact:
    _internal: "{{_image_registry_url}}{{item.image}}-{{item.arch}}"
    _external: "{{item.ext}}{{item.image}}"
    _buildhost: "{{_build_host[item.arch]}}"

- name: "{{_buildhost}}: create openvpn directories"
  delegate_to: "{{_buildhost}}"
  file:
    path: "{{item.directory}}"
    owner: "{{item.owner}}"
    group: "{{item.group}}"
    mode: "{{item.mode}}"
    state: directory
  become: true
  with_items:
    - { directory: "/var/lib/docker-openvpn",owner: "root" ,group: "root" ,mode: "0777" }

- name: "{{_buildhost}}: set sysctl fs.inotify"
  delegate_to: "{{_buildhost}}"
  ansible.posix.sysctl:
    name: "{{item.name}}"
    value: "{{item.value}}"
    state: present
  become: true
  with_items:
    - { name: "fs.inotify.max_queued_events", value: "32768" }
    - { name: "fs.inotify.max_user_instances", value: "1024" }
    - { name: "fs.inotify.max_user_watches", value: "16384" }

- name: "{{_buildhost}}: pull {{_image_registry_url}}{{hostvars[groups['openvpn'][0]]['_alpine_image']['image']}}-{{_architecture}}"
  delegate_to: "{{_buildhost}}"
  shell: |
    podman pull {{_image_registry_url}}{{hostvars[groups['openvpn'][0]]['_alpine_image']['image']}}-{{_architecture}}
  become: true

- name: "{{_buildhost}}: clone docker-openvpn in /var/lib/docker-openvpn"
  delegate_to: "{{_buildhost}}"
  git:
    repo: 'https://github.com/kylemanna/docker-openvpn.git'
    dest: /var/lib/docker-openvpn
    force: true
  become: true

- name: "{{_buildhost}}: copy files to /var/lib/docker-openvpn/ for podman build"
  delegate_to: "{{_buildhost}}"
  template:
    src: "openvpn/Dockerfile.j2"
    dest: "/var/lib/docker-openvpn/Dockerfile"
    owner: root
    group: root
    mode: 0664
  become: true

- name: "{{_buildhost}}: build openvpn image"
  delegate_to: "{{_buildhost}}"
  shell: |
    cd /var/lib/docker-openvpn
    podman build -t {{_internal}} -f /var/lib/docker-openvpn/Dockerfile
  become: true
  register: _build
  failed_when: false

- debug:
    var: _build.stdout

- name: "{{_buildhost}}: tag {{_internal}} {{_external}}"
  delegate_to: "{{_buildhost}}"
  shell: |
    podman tag {{_internal}} {{_external}}
  become: true

- name: "{{_buildhost}}: push image to {{_external}} and {{_internal}}"
  delegate_to: "{{_buildhost}}"
  shell: |
    podman login -u registry -p "{{hostvars[groups['registry'][0]]['_registry_password']}}" "{{_image_registry_url}}"
    podman push {{_internal}}
    podman login -u "{{_dockerio_username}}" -p "{{_dockerio_token}}" "{{_dockerio_url}}"
    podman push {{_external}}
  become: true

- name: "{{_buildhost}}: get image info after build"
  delegate_to: "{{_buildhost}}"
  shell: |
    podman images --format "{{ '{{' }}.ID{{ '}}' }} {{ '{{' }}.Repository{{ '}}' }} {{ '{{' }}.Tag{{ '}}' }}  {{ '{{' }}.Digest{{ '}}' }}" | grep openvpn
  become: true
  register: _openvpn_image

- debug:
    var: _openvpn_image.stdout

