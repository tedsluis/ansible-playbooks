---

- name: create local /var/lib/certs directory for certs
  file:
    path: "/var/lib/certs"
    owner: root
    group: root
    mode: 0777
    state: directory
  delegate_to: localhost
  become: true

- name: set fact httpd directories
  set_fact:
    _httpd_directories:
      - { directory: "",           owner: "httpd",group: "httpd",mode: "0775" }
      - { directory: "/conf",      owner: "httpd",group: "httpd",mode: "0775" }
      - { directory: "/conf/extra",owner: "httpd",group: "httpd",mode: "0775" }
      - { directory: "/www",       owner: "httpd",group: "httpd",mode: "0775" }
      - { directory: "/logs",      owner: "httpd",group: "httpd",mode: "0775" }
      - { directory: "/www/health",owner: "httpd",group: "httpd",mode: "0775" }

- name: create /var/lib/httpd-<sitename>/* directories for each site
  file:
    path: "/var/lib/httpd-{{item[0].sitename}}{{item[1].directory}}"
    owner: "{{item[1].owner}}"
    group: "{{item[1].group}}"
    mode: "{{item[1].mode}}"
    state: directory
  become: true
  with_nested:
    - "{{_httpd_sites}}"
    - "{{_httpd_directories}}"

- set_fact:
    _httpd_configfiles:
      - {file: "httpd.conf", path: "conf"}
      - {file: "httpd-ssl.conf", path: "conf/extra"}
      
- name: copy /var/lib/httpd-<sitename>/ configuration files for each site
  template:
    src: '{{item[1].file}}.j2'
    dest: '/var/lib/httpd-{{item[0].sitename}}/{{item[1].path}}/{{item[1].file}}'
    owner: httpd
    group: httpd
    mode: 0664
  become: true
  with_nested:
    - "{{_httpd_sites}}"
    - "{{_httpd_configfiles}}"
  notify: _restart_httpd

- set_fact:
    _httpd_keys:
      - { src: 'privkey.pem',   dest: 'server.key' }
      - { src: 'fullchain.pem', dest: 'server.crt' }

- name: fetch keys from /var/lib/letsencrypt/keys/letsencrypt/
  delegate_to: "{{hostvars[groups['letsencrypt'][0]]['_letsencrypt_inventory_hostname']}}"
  run_once: yes
  fetch:
    src: "/var/lib/letsencrypt/keys/letsencrypt/{{item}}"
    dest: "/var/lib/certs/"
    flat: yes
  become: true
  with_items:
    - privkey.pem
    - fullchain.pem

- name: copy /var/lib/httpd-<sitename>/conf/ certificate files
  copy:
    src: '/var/lib/certs/{{item[1].src}}'
    dest: '/var/lib/httpd-{{item[0].sitename}}/conf/{{item[1].dest}}'
    owner: httpd
    group: httpd
    mode: 0664
  become: true
  with_nested:
    - "{{_httpd_sites}}"
    - "{{_httpd_keys}}"
  notify: _restart_httpd

- set_fact:
    _httpd_pages:
      - { pagename: 'root web site page holder', path: 'index.html' }
      - { pagename: 'health check',              path: 'health/index.html' }

- name: create index.html and health/index.html
  template:
    src: index.html
    dest: '/var/lib/httpd-{{item[0].sitename}}/www/{{item[1].path}}'
    owner: httpd
    group: httpd
    mode: 0664
  become: true
  with_nested: 
    - "{{_httpd_sites}}"
    - "{{_httpd_pages}}"

- name: create create-users.sh
  template:
    src: create-users.sh
    dest: '/var/lib/httpd-{{item.sitename}}/www/create-users.sh'
    owner: httpd
    group: httpd
    mode: 0664
  become: true
  loop: "{{_httpd_sites}}"

- name: "pull docker.io/httpd:{{_httpd_image_tag}} image"
  shell: |
    podman pull docker.io/httpd:{{_httpd_image_tag}}
  register: _image_pull
  become: true

- debug:
    var: _image_pull

- name: create /etc/systemd/system/httpd-<sitename>.service
  template:
    src: httpd.service.j2
    dest: '/etc/systemd/system/httpd-{{item[0].sitename}}.service'
    owner: root
    group: root
    mode: 0664
  become: true
  with_nested: 
    - "{{_httpd_sites}}"
    - "{{_httpd_users}}"
  notify: _restart_httpd

- name: start and enable httpd-<sitename>.service
  systemd:
    name: 'httpd-{{item.sitename}}'
    state: started
    enabled: true
  with_items: "{{_httpd_sites}}"
  become: true
  
- name: httpd podman container httpd state
  shell: |
    podman ps -a --format "{{ '{{' }}.Status{{ '}}' }}  {{ '{{' }}.Names{{ '}}' }}  {{ '{{' }}.ID{{ '}}' }}" --filter 'name=httpd-{{item.sitename}}'
  register: _container_state
  with_items: "{{_httpd_sites}}"
  become: true

- debug:
    var: _container_state

- name: trigger handelers
  meta: flush_handlers
