---

- name: create local /var/lib/certs directory for certs
  file:
    path: /var/lib/certs
    owner: root
    group: root
    mode: 0777
    state: directory
  delegate_to: localhost
  become: true

- name: create jenkins directories
  file:
    path: "{{item.directory}}"
    owner: "{{item.owner}}"
    group: "{{item.group}}"
    mode: "{{item.mode}}"
    state: directory
  become: true
  with_items:
    - { directory: "/var/lib/jenkins"                    ,owner: "root" ,group: "root" ,mode: "0777" }
    - { directory: "/var/lib/jenkins/data"               ,owner: "root" ,group: "root" ,mode: "0777" }
    - { directory: "/var/lib/jenkins/certs"              ,owner: "root" ,group: "root" ,mode: "0777" }
    - { directory: "/var/lib/jenkins/data/keystore"      ,owner: "root" ,group: "root" ,mode: "0777" }
    - { directory: "/var/lib/jenkins/data/init.groovy.d" ,owner: "root" ,group: "root" ,mode: "0777" }

- include_role:
    name: pull-images
  vars:
    _images:
      - _jenkins_image

- name: fetch keys from /var/lib/letsencrypt/keys/letsencrypt/
  delegate_to: "{{hostvars[groups['letsencrypt'][0]]['_letsencrypt_inventory_hostname']}}"
  run_once: yes
  fetch:
    src: "/var/lib/letsencrypt/keys/letsencrypt/{{item}}"
    dest: "/var/lib/certs/"
    flat: yes
  become: true
  with_items:
    - privkey.pem
    - fullchain.pem

- name: copy keys to /var/lib/jenkins/certs
  copy:
    src: "/var/lib/certs/{{item}}"
    dest: "/var/lib/jenkins/certs/{{item}}"
    owner: root
    group: root
    mode: 0666
  become: true
  with_items:
    - privkey.pem
    - fullchain.pem
  notify: _restart_jenkins

- name: convert fullchain.pem and privkey.pem to jenkins.p12
  shell: |
    podman run --rm -it \
        -v /var/lib/jenkins/certs:/certs:z \
        {{_image_registry_url}}{{_jenkins_image.image}}-{{_architecture}} \
        /bin/bash -c 'openssl pkcs12 \
            -export \
            -out /certs/jenkins.p12 \
            -password pass:{{_jenkins_passphrase}} \
            -inkey /certs/privkey.pem \
            -in /certs/fullchain.pem \
            -certfile /etc/ssl/certs/ca-certificates.crt \
            -name {{_jenkins_fqdn}}'  
  become: true

- name: add jenkins.p12 to keystore
  shell: |
    podman run --rm -it \
        -v /var/lib/jenkins/certs:/certs:z \
        {{_image_registry_url}}{{_jenkins_image.image}}-{{_architecture}} \
        /bin/bash -c 'keytool -importkeystore \
            -srckeystore /certs/jenkins.p12 \
            -srcstorepass {{_jenkins_passphrase}}  \
            -srcstoretype PKCS12 -srcalias {{_jenkins_fqdn}} \
            -deststoretype JKS \
            -destkeystore /certs/jenkins.jks \
            -deststorepass {{_jenkins_passphrase}} \
            -destalias {{_jenkins_fqdn}} \
            -noprompt'
  become: true

- name: copy /var/lib/jenkins/certs/jenkins.jks to /var/lib/jenkins/data/keystore/jenkins.jks
  copy:
    src: /var/lib/jenkins/certs/jenkins.jks
    dest: /var/lib/jenkins/data/keystore/jenkins.jks
    remote_src: true
    owner: root
    group: root
    mode: 0664
  become: true
  notify: _restart_jenkins

- name: create /var/lib/jenkins/data/init.groovy.d/user-setup.groovy
  template:
    src: user-setup.groovy.j2
    dest: /var/lib/jenkins/data/init.groovy.d/user-setup.groovy
    owner: root
    group: root
    mode: 0664
  become: true
  notify: _restart_jenkins

- name: create /etc/systemd/system/jenkins.service
  template:
    src: jenkins.service.j2
    dest: /etc/systemd/system/jenkins.service
    owner: root
    group: root
    mode: 0664
  become: true
  notify: _restart_jenkins

- name: start and enable jenkins.service
  systemd:
    name: jenkins
    state: started
    enabled: true
  become: true

- name: trigger handelers
  meta: flush_handlers

- name: jenkins container state
  shell: |
    podman ps -a --format "{{ '{{' }}.Status{{ '}}' }}  {{ '{{' }}.Names{{ '}}' }}  {{ '{{' }}.ID{{ '}}' }}" --filter 'name=jenkins'
  register: _container_state
  become: true

- debug:
    var: _container_state

- name: "pause until jenkins is reachable"
  uri:
    url: "https://{{_jenkins_fqdn}}:8443"
    follow_redirects: none
    method: POST
    url_username: "{{_jenkins_user}}"
    url_password: "{{_jenkins_password}}"
    force_basic_auth: yes
    follow_redirects: all
  register: _result
  until: _result.status == 200
  retries: 10 # 10 * 5 seconds
  delay: 5 # Every 5 seconds
  failed_when: false

- debug:
    msg: "status:{{_result.status}}"

- name: get jenkins-cli
  shell: |
    podman exec -it jenkins /usr/bin/wget https://{{_jenkins_fqdn}}:8443/jnlpJars/jenkins-cli.jar -O /tmp/jenkins-cli.jar
  become: true

- name: get installed plugins
  shell: |
    podman exec -it jenkins /usr/bin/java -jar /tmp/jenkins-cli.jar -s https://{{_jenkins_fqdn}}:8443 -auth {{_jenkins_user}}:{{_jenkins_password}} list-plugins | awk '{print ":" $1 ":"}'
  become: true
  register: _current_jenkins_plugins

- debug:
    msg: "current plugins:{{_current_jenkins_plugins.stdout_lines}}"

- name: create list of plugins not yet installed
  set_fact:
    _new_plugins: "{{_new_plugins|default([]) + [item|replace(':','')]}}"
  loop: "{{_jenkins_plugins}}"
  when: item not in _current_jenkins_plugins.stdout_lines

- debug:
    msg: "list of plugins not yet installed:{{_new_plugins}}"
  when: _new_plugins is defined

- name: install plugins
  shell: |
    podman exec -it jenkins /usr/bin/java -jar /tmp/jenkins-cli.jar -s https://{{_jenkins_fqdn}}:8443 -auth {{_jenkins_user}}:{{_jenkins_password}} install-plugin {{_new_plugins|join(' ')}} -restart
  become: true
  when: 
    - _new_plugins is defined
    - _new_plugins | length > 0
  register: _result_install_plugins

- debug:
    msg: "{{_result_install_plugins.stdout_lines|default('empty')}}"
  when: _result_install_plugins is defined
