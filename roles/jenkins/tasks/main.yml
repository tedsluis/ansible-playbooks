---

- name: "include ansible secrets to get duckdns token"
  include_vars: inventory/group_vars/vault.yaml

- name: create local /tmp/certs directory for certs
  file:
    path: /tmp/certs
    owner: root
    group: root
    mode: 0777
    state: directory
  delegate_to: localhost
  become: true

- name: create jenkins directories
  file:
    path: "{{item.directory}}"
    owner: "{{item.owner}}"
    group: "{{item.group}}"
    mode: "{{item.mode}}"
    state: directory
  become: true
  with_items:
    - { directory: "/root/jenkins"                       ,owner: "root"    ,group: "root"    ,mode: "0775" }
    - { directory: "/var/lib/jenkins"                    ,owner: "jenkins" ,group: "jenkins" ,mode: "0777" }
    - { directory: "/var/lib/jenkins/data"               ,owner: "jenkins" ,group: "jenkins" ,mode: "0777" }
    - { directory: "/var/lib/jenkins/certs"              ,owner: "jenkins" ,group: "jenkins" ,mode: "0777" }
    - { directory: "/var/lib/jenkins/data/keystore"      ,owner: "jenkins" ,group: "jenkins" ,mode: "0777" }
    - { directory: "/var/lib/jenkins/data/init.groovy.d" ,owner: "jenkins" ,group: "jenkins" ,mode: "0777" }

- name: "pull docker.io/jenkins4eval/jenkins:{{_jenkins_image_tag}} image"
  shell: |
    podman pull docker.io/jenkins4eval/jenkins:{{_jenkins_image_tag}}
  register: _image_pull
  become: true

- debug:
    var: _image_pull
    
- name: copy files to /root/jenkins/ for podman build 
  template:
    src: "{{item}}.j2"
    dest: "/root/jenkins/{{item}}"
    owner: jenkins
    group: jenkins
    mode: 0664
  become: true
  with_items:
    - Dockerfile
    - plugins.txt
  notify: _restart_jenkins

- name: get image info before build
  shell: |
    podman images --format "{{ '{{' }}.ID{{ '}}' }} {{ '{{' }}.Repository{{ '}}' }} {{ '{{' }}.Tag{{ '}}' }}  {{ '{{' }}.Digest{{ '}}' }}" | grep localhost/jenkins | grep {{_jenkins_image_tag}}
  become: true
  register: _image_info1
  failed_when:
    - _image_info1.rc != 0
    - _image_info1.stdout != ""
  
- name: build jenkins image
  shell: |
    cd /root/jenkins
    podman build -t jenkins:{{_jenkins_image_tag}} -f /root/jenkins/Dockerfile
  become: true
  register: _build
  failed_when: false

- debug:
    var: _build.stdout
 
- name: get image info after build
  shell: |
    podman images --format "{{ '{{' }}.ID{{ '}}' }} {{ '{{' }}.Repository{{ '}}' }} {{ '{{' }}.Tag{{ '}}' }}  {{ '{{' }}.Digest{{ '}}' }}" | grep localhost/jenkins | grep {{_jenkins_image_tag}}
  become: true
  register: _image_info2
  failed_when:
    - _image_info2.rc != 0
    - _image_info2.stdout != ""
 
- debug:
    msg: "_image_info1={{_image_info1.stdout}} <> _image_info2={{_image_info2.stdout}}"
  when: _image_info1.stdout != _image_info2.stdout
  notify: _restart_jenkins

- name: fetch keys from /var/lib/letsencrypt/keys/letsencrypt/
  delegate_to: "{{_letsencrypt_hostname}}"
  run_once: yes
  fetch:
    src: "/var/lib/letsencrypt/keys/letsencrypt/{{item}}"
    dest: "/tmp/certs/"
    flat: yes
  become: true
  with_items:
    - privkey.pem
    - fullchain.pem

- name: copy keys to /var/lib/jenkins/certs
  copy:
    src: "/tmp/certs/{{item}}"
    dest: "/var/lib/jenkins/certs/{{item}}"
    owner: root
    group: root
    mode: 0666
  become: true
  with_items:
    - privkey.pem
    - fullchain.pem
  notify: _restart_jenkins

- name: convert fullchain.pem and privkey.pem to jenkins.p12
  shell: |
    podman run --rm -it \
        -v /var/lib/jenkins/certs:/certs:z \
        jenkins:{{_jenkins_image_tag}} \
        /bin/bash -c 'openssl pkcs12 \
            -export \
            -out /certs/jenkins.p12 \
            -password pass:{{_jenkins_passphrase}} \
            -inkey /certs/privkey.pem \
            -in /certs/fullchain.pem \
            -certfile /etc/ssl/certs/ca-certificates.crt \
            -name {{_jenkins_base_url}}'  
  become: true

- name: add jenkins.p12 to keystore
  shell: |
    podman run --rm -it \
        -v /var/lib/jenkins/certs:/certs:z \
        jenkins:{{_jenkins_image_tag}} \
        /bin/bash -c 'keytool -importkeystore \
            -srckeystore /certs/jenkins.p12 \
            -srcstorepass {{_jenkins_passphrase}}  \
            -srcstoretype PKCS12 -srcalias {{_jenkins_base_url}} \
            -deststoretype JKS \
            -destkeystore /certs/jenkins.jks \
            -deststorepass {{_jenkins_passphrase}} \
            -destalias {{_jenkins_base_url}} \
            -noprompt'
  become: true

- name: copy /var/lib/jenkins/certs/jenkins.jks to /var/lib/jenkins/data/keystore/jenkins.jks
  copy:
    src: /var/lib/jenkins/certs/jenkins.jks
    dest: /var/lib/jenkins/data/keystore/jenkins.jks
    remote_src: true
    owner: root
    group: root
    mode: 0664
  become: true
  notify: _restart_jenkins

- name: create /var/lib/jenkins/data/init.groovy.d/user-setup.groovy
  template:
    src: user-setup.groovy.j2
    dest: /var/lib/jenkins/data/init.groovy.d/user-setup.groovy
    owner: root
    group: root
    mode: 0664
  become: true
  notify: _restart_jenkins

- name: create /etc/systemd/system/jenkins.service
  template:
    src: jenkins.service.j2
    dest: /etc/systemd/system/jenkins.service
    owner: root
    group: root
    mode: 0664
  become: true
  notify: _restart_jenkins

- name: start and enable jenkins.service
  systemd:
    name: jenkins
    state: started
    enabled: true
  become: true

- name: trigger handelers
  meta: flush_handlers

- name: jenkins container state
  shell: |
    podman ps -a --format "{{ '{{' }}.Status{{ '}}' }}  {{ '{{' }}.Names{{ '}}' }}  {{ '{{' }}.ID{{ '}}' }}" --filter 'name=jenkins'
  register: _container_state
  become: true

- debug:
    var: _container_state


