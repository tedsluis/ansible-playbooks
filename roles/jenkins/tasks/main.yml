---

- name: create local /var/lib/certs directory for certs
  file:
    path: /var/lib/certs
    owner: root
    group: root
    mode: 0777
    state: directory
  delegate_to: localhost
  become: true

- name: create jenkins directories
  file:
    path: "{{item.directory}}"
    owner: "{{item.owner}}"
    group: "{{item.group}}"
    mode: "{{item.mode}}"
    state: directory
  become: true
  with_items:
    - { directory: "/var/lib/jenkins"                    ,owner: "root" ,group: "root" ,mode: "0777" }
    - { directory: "/var/lib/jenkins/data"               ,owner: "root" ,group: "root" ,mode: "0777" }
    - { directory: "/var/lib/jenkins/certs"              ,owner: "root" ,group: "root" ,mode: "0777" }
    - { directory: "/var/lib/jenkins/data/keystore"      ,owner: "root" ,group: "root" ,mode: "0777" }
    - { directory: "/var/lib/jenkins/data/init.groovy.d" ,owner: "root" ,group: "root" ,mode: "0777" }

- include_role:
    name: pull-images
  vars:
    _images:
      - _jenkins_image

- name: fetch keys from /var/lib/letsencrypt/keys/letsencrypt/
  delegate_to: "{{hostvars[groups['letsencrypt'][0]]['_letsencrypt_inventory_hostname']}}"
  run_once: yes
  fetch:
    src: "/var/lib/letsencrypt/keys/letsencrypt/{{item}}"
    dest: "/var/lib/certs/"
    flat: yes
  become: true
  with_items:
    - privkey.pem
    - fullchain.pem

- name: copy keys to /var/lib/jenkins/certs
  copy:
    src: "/var/lib/certs/{{item}}"
    dest: "/var/lib/jenkins/certs/{{item}}"
    owner: root
    group: root
    mode: 0666
  become: true
  with_items:
    - privkey.pem
    - fullchain.pem
  notify: _restart_jenkins

- name: convert fullchain.pem and privkey.pem to jenkins.p12
  shell: |
    podman run --rm -it \
        -v /var/lib/jenkins/certs:/certs:z \
        {{_jenkins_image.image}} \
        /bin/bash -c 'openssl pkcs12 \
            -export \
            -out /certs/jenkins.p12 \
            -password pass:{{_jenkins_passphrase}} \
            -inkey /certs/privkey.pem \
            -in /certs/fullchain.pem \
            -certfile /etc/ssl/certs/ca-certificates.crt \
            -name {{_jenkins_fqdn}}'  
  become: true

- name: add jenkins.p12 to keystore
  shell: |
    podman run --rm -it \
        -v /var/lib/jenkins/certs:/certs:z \
        {{_jenkins_image.image}} \
        /bin/bash -c 'keytool -importkeystore \
            -srckeystore /certs/jenkins.p12 \
            -srcstorepass {{_jenkins_passphrase}}  \
            -srcstoretype PKCS12 -srcalias {{_jenkins_fqdn}} \
            -deststoretype JKS \
            -destkeystore /certs/jenkins.jks \
            -deststorepass {{_jenkins_passphrase}} \
            -destalias {{_jenkins_fqdn}} \
            -noprompt'
  become: true

- name: copy /var/lib/jenkins/certs/jenkins.jks to /var/lib/jenkins/data/keystore/jenkins.jks
  copy:
    src: /var/lib/jenkins/certs/jenkins.jks
    dest: /var/lib/jenkins/data/keystore/jenkins.jks
    remote_src: true
    owner: root
    group: root
    mode: 0664
  become: true
  notify: _restart_jenkins

- name: create /var/lib/jenkins/data/init.groovy.d/user-setup.groovy
  template:
    src: user-setup.groovy.j2
    dest: /var/lib/jenkins/data/init.groovy.d/user-setup.groovy
    owner: root
    group: root
    mode: 0664
  become: true
  notify: _restart_jenkins

- name: create /etc/systemd/system/jenkins.service
  template:
    src: jenkins.service.j2
    dest: /etc/systemd/system/jenkins.service
    owner: root
    group: root
    mode: 0664
  become: true
  notify: _restart_jenkins

- name: start and enable jenkins.service
  systemd:
    name: jenkins
    state: started
    enabled: true
  become: true

- name: trigger handelers
  meta: flush_handlers

- name: jenkins container state
  shell: |
    podman ps -a --format "{{ '{{' }}.Status{{ '}}' }}  {{ '{{' }}.Names{{ '}}' }}  {{ '{{' }}.ID{{ '}}' }}" --filter 'name=jenkins'
  register: _container_state
  become: true

- debug:
    var: _container_state


