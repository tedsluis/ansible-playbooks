---

# install argocd 
- name: install argocd
  shell: |
    kubectl create namespace argocd || echo "namespace argocd already created"
    kubectl create -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml || kubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml
  environment:
    KUBECONFIG: '/etc/kubernetes/admin.conf'
  become: true

- name: copy argocd-cm.yaml
  ansible.builtin.copy:
    src: argocd/argocd-cm.yaml
    dest: /tmp/argocd-cm.yaml
    owner: root
    group: root
    mode: 0664
  become: true

- name: install argocd-cm.yaml
  shell: |
    kubectl create -n argocd -f /tmp/argocd-cm.yaml || kubectl apply -n argocd -f /tmp/argocd-cm.yaml
  environment:
    KUBECONFIG: '/etc/kubernetes/admin.conf'
  become: true
  failed_when: false

- name: copy clusterrolebinding argocd-argocd-application-controller service account
  ansible.builtin.copy:
    src: clusterrolebinding.yaml
    dest: /tmp/clusterrolebinding.yaml
    owner: root
    group: root
    mode: 0660
  become: true
    
- name: create clusterrolebinding argocd-argocd-application-controller service account
  shell: |
    kubectl create -n argocd -f /tmp/clusterrolebinding.yaml || kubectl apply -n argocd -f /tmp/clusterrolebinding.yaml 
  environment:
    KUBECONFIG: '/etc/kubernetes/admin.conf'
  become: true
  failed_when: false

# kubernetes secret with git ssh key, ansible-vault encrypted
# https://kubernetes.io/docs/concepts/configuration/secret/#use-case-pod-with-ssh-keys
- name: copy git-ssh-secret secret
  ansible.builtin.copy:
    src: git-ssh-secret.yaml
    dest: /tmp/git-ssh-secret.yaml
    owner: root
    group: root
    mode: 0660
  become: true
    
- name: create git-ssh-secret
  shell: |
    kubectl create -n argocd -f /tmp/git-ssh-secret.yaml || kubectl apply -n argocd -f /tmp/git-ssh-secret.yaml
  environment:
    KUBECONFIG: '/etc/kubernetes/admin.conf'
  become: true
  failed_when: false

# create argocd argoproj.io/v1alpha1
- name: copy argocd base
  ansible.builtin.copy:
    src: argocd-base.yaml
    dest: /tmp/argocd-base.yaml
    owner: root
    group: root
    mode: 0664
  become: true
    
- name: install argocd base
  shell: |
    kubectl create -n argocd -f /tmp/argocd-base.yaml || kubectl apply -n argocd -f /tmp/argocd-base.yaml
  environment:
    KUBECONFIG: '/etc/kubernetes/admin.conf'
  become: true
  failed_when: false

- name: wait for rollout deployment.apps/argocd-redis
  shell: |
    kubectl rollout status  --namespace="argocd" -w deployment.apps/argocd-redis
  environment:
    KUBECONFIG: '/etc/kubernetes/admin.conf'
  become: true
  failed_when: false
  register: _result
  until: '"successfully" in _result.stdout'
  retries: 60
  delay: 5

- name: wait for rollout deployment.apps/argocd-repo-server
  shell: |
    kubectl rollout status  --namespace="argocd" -w deployment.apps/argocd-repo-server
  environment:
    KUBECONFIG: '/etc/kubernetes/admin.conf'
  become: true
  failed_when: false
  register: _result
  until: '"successfully" in _result.stdout'
  retries: 60
  delay: 5

- name: wait for rollout deployment.apps/argocd-server
  shell: |
    kubectl rollout status  --namespace="argocd" -w deployment.apps/argocd-server
  environment:
    KUBECONFIG: '/etc/kubernetes/admin.conf'
  become: true
  failed_when: false
  register: _result
  until: '"successfully" in _result.stdout'
  retries: 60
  delay: 5

- name: wait for rollout statefulset.apps/argocd-application-controller
  shell: |
    kubectl rollout status  --namespace="argocd" -w statefulset.apps/argocd-application-controller
  environment:
    KUBECONFIG: '/etc/kubernetes/admin.conf'
  become: true
  failed_when: false
  register: _result
  until: '"out complete" in _result.stdout'
  retries: 60
  delay: 5

- name: wait for rollout deployment.apps/argocd-dex-server
  shell: |
    kubectl rollout status  --namespace="argocd" -w deployment.apps/argocd-dex-server
  environment:
    KUBECONFIG: '/etc/kubernetes/admin.conf'
  become: true
  failed_when: false
  register: _result
  until: '"successfully" in _result.stdout'
  retries: 60
#   delay: 5

- name: copy argocd app of apps
  ansible.builtin.copy:
    src: argocd/apps.yaml
    dest: /tmp/argocd-apps.yaml
    owner: root
    group: root
    mode: 0664
  become: true

- name: install argocd app of apps
  shell: |
    kubectl create -n argocd -f /tmp/argocd-apps.yaml || kubectl apply -n argocd -f /tmp/argocd-apps.yaml
  environment:
    KUBECONFIG: '/etc/kubernetes/admin.conf'
  become: true
  failed_when: false

