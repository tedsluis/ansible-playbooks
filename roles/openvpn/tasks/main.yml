---

- name: create openvpn directories
  file:
    path: "{{item.directory}}"
    owner: "{{item.owner}}"
    group: "{{item.group}}"
    mode: "{{item.mode}}"
    state: directory
  become: true
  with_items:
    - { directory: "/var/lib/openvpn",                     owner: "root" ,group: "root" ,mode: "0777" }
    - { directory: "/var/lib/openvpn/data",                owner: "root" ,group: "root" ,mode: "0777" }
    - { directory: "/var/lib/openvpn/data/ccd",            owner: "root" ,group: "root" ,mode: "0777" }
    - { directory: "/var/lib/openvpn/status",              owner: "root" ,group: "root" ,mode: "0777" }
    - { directory: "/var/lib/openvpn/clone",               owner: "root" ,group: "root" ,mode: "0777" }
    - { directory: "/var/lib/openvpn/clone/docker-openvpn",owner: "root" ,group: "root" ,mode: "0777" }

- include_role:
    name: pull-images
  vars:
    _images:
      - _openvpn_image
      - _openvpnexporter_image

- name: copy files to /var/lib/openvpn/data
  template:
    src: "{{item}}"
    dest: "/var/lib/openvpn/data/{{item}}"
    owner: root
    group: root
    mode: 0644
  become: true
  with_items: 
    - ovpn_env.sh
    - openvpn.conf
  notify: _restart_openvpn

- name: check pod
  command: podman pod ps
  register: _pods
  become: true

- name: create openvpn pod 
  containers.podman.podman_pod:
    name: openvpnpod
    state: started
    ports:
      - 1194:1194/udp
      - 9176:9176
  become: true
  when: _pods.stdout is not search('openvpnpod')

- name: check containers
  command: podman ps -a
  register: _check_containers
  become: true

- debug:
    msg: "CHECK_CONTAINER={{ _check_containers.stdout}}"

- name: remove containers
  shell: |
    podman rm -f {{item}}
  become: true
  loop: 
    - openvpn
    - open_vpn_exporter
  when: 'item in _check_containers.stdout'

- name: check containers
  command: podman ps -a
  register: _check_containers
  become: true

- debug:
    msg: "podman ps: {{_check_containers}}"

- name: touch /var/lib/openvpn/status/ openvpn-status.log and status
  ansible.builtin.file: 
    path: "{{item}}"
    state: touch
    owner: root
    group: root
    mode: 0777
  become: true
  loop:
    - /var/lib/openvpn/status/openvpn-status.log
    - /var/lib/openvpn/status/status

- name: copy files to /var/lib/openvpn/status
  copy:
    src: status.sh
    dest: "/var/lib/openvpn/status/status.sh"
    owner: root
    group: root
    mode: 0777
  become: true

- name: cronjob openvpnstatus
  ansible.builtin.cron:
    name: "openvpn status"
    minute: "*/1"
    job: "/var/lib/openvpn/status/status.sh"
  become: true

- name: create openvpn container
  shell: |
    podman create --pod openvpnpod \
                  --name openvpn \
                  --log-driver=journald \
                  -v /var/lib/openvpn/data:/etc/openvpn:z \
                  -v /var/lib/openvpn/status/openvpn-status.log:/tmp/openvpn-status.log:z \
                  --device /dev/net/tun \
                  --restart on-failure \
                  --privileged \
                  --tz {{_timezone}} \
                  {{_image_registry_url}}{{_openvpn_image.image}}-{{_architecture}}
                  #--cap-add NET_ADMIN,NET_RAW \
  become: true
  when: '"openvpn" not in _check_containers.stdout'
  register: _openvpn_container_created
  notify: _restart_openvpn

- name: create systemd openvpn file
  shell: |
    podman generate systemd --name openvpn > /etc/systemd/system/openvpn.service 
  become: true
  when: _openvpn_container_created.changed
  notify: _restart_openvpn

- name: create open_vpn_exporter container
  shell: |
    podman create --pod openvpnpod \
                  --name open_vpn_exporter \
                  -v /var/lib/openvpn/status/status:/etc/openvpn_exporter/status:z \
                  --restart on-failure \
                  --tz {{_timezone}} \
                  {{_image_registry_url}}{{_openvpnexporter_image.image}}-{{_architecture}} -openvpn.status_paths /etc/openvpn_exporter/status
  become: true
  when: '"open_vpn_exporter" not in _check_containers.stdout'
  register: _open_vpn_exporter_container_created
  notify: _restart_open_vpn_exporter

- name: create systemd open_vpn_exporter file
  shell: |
    podman generate systemd --name open_vpn_exporter > /etc/systemd/system/openvpnexporter.service 
  become: true
  when: _open_vpn_exporter_container_created.changed
  notify: _restart_open_vpn_exporter

- name: trigger handelers
  meta: flush_handlers

- name: containers state
  shell: |
    podman ps -a --format "{{ '{{' }}.Status{{ '}}' }}  {{ '{{' }}.Names{{ '}}' }}  {{ '{{' }}.ID{{ '}}' }}" --filter 'name={{item}}'
  register: _containers_state
  become: true
  with_items:
    - openvpn
    - open_vpn_exporter

- debug:
    var: _containers_state
    
