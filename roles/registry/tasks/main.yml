---

- name: create registry directories
  file:
    path: "{{item.directory}}"
    owner: "{{item.owner}}"
    group: "{{item.group}}"
    mode: "{{item.mode}}"
    state: directory
  become: true
  with_items:
    - { directory: "/var/lib/registry",        owner: "root" ,group: "root" ,mode: "0777" }
    - { directory: "/var/lib/registry/auth",   owner: "root" ,group: "root" ,mode: "0777" }
    - { directory: "/var/lib/registry/certs",  owner: "root" ,group: "root" ,mode: "0774" }
    - { directory: "/var/lib/registry/data",   owner: "root" ,group: "root" ,mode: "0777" }
    - { directory: "/var/lib/registry/config", owner: "root" ,group: "root" ,mode: "0777" }
    - { directory: "/var/lib/registry/haproxy",owner: "root" ,group: "root" ,mode: "0777" }

- include_role:
    name: pull-images
  vars:
    _images: 
      - _registry_image
      - _docker_registry_ui_image
      - _haproxy_image

- name: create local /var/lib/certs directory for certs
  file:
    path: /var/lib/certs
    owner: root
    group: root
    mode: 0777
    state: directory
  delegate_to: localhost
  become: true

- name: fetch keys from /var/lib/letsencrypt/keys/letsencrypt/
  delegate_to: "{{hostvars[groups['letsencrypt'][0]]['_letsencrypt_inventory_hostname']}}"
  run_once: yes
  fetch:
    src: "/var/lib/letsencrypt/keys/letsencrypt/{{item}}"
    dest: "/var/lib/certs/"
    flat: yes
  become: true
  with_items:
    - privkey.pem
    - fullchain.pem

- name: copy cert and key to host
  copy:
    src: /var/lib/certs/{{item}}
    dest: /var/lib/registry/certs/{{item}}
    owner: root
    group: root
    mode: 0664
  become: true
  with_items:
    - fullchain.pem
    - privkey.pem
  notify: _restart_registry

- name: create pem file
  ansible.builtin.assemble:
    src: /var/lib/registry/certs/
    dest: /var/lib/registry/haproxy/{{ _registry_fqdn }}-crt-key.pem
    owner: root
    group: root
    mode: 0664
  become: true

- name: create haproxy config
  template:
    src: haproxy.cfg.j2
    dest: /var/lib/registry/haproxy/haproxy.cfg
    owner: root
    group: root
    mode: 0666
  become: true
  notify: _restart_haproxy

- name: create registry config.yml file
  template:
    src: config.yml.j2
    dest: /var/lib/registry/config/config.yml
    owner: root
    group: root
    mode: 0666
  become: true
  notify: _restart_registry

- name: set registry password
  shell: |
    htpasswd -bBc /var/lib/registry/auth/htpasswd registry {{_registry_password}}
  become: true
  notify: _restart_registry

- name: create registry pod 
  containers.podman.podman_pod:
    name: registrypod
    state: started
    ports:
      - 5000:5000
      - 5443:5443
  become: true

- name: create registry container
  containers.podman.podman_container:
    name: registry
    pod: registrypod
    image: "{{_image_registry_url}}{{_registry_image.image}}"
    state: present
    env:
      REGISTRY_AUTH: "htpasswd"
      REGISTRY_AUTH_HTPASSWD_REALM: "Registry Realm"
      REGISTRY_AUTH_HTPASSWD_PATH: "/auth/htpasswd"
      REGISTRY_HTTP_TLS_CERTIFICATE: "/certs/fullchain.pem"
      REGISTRY_HTTP_TLS_KEY: "/certs/privkey.pem"
      REGISTRY_COMPATIBILITY_SCHEMA1_ENABLED: true
    privileged: true
    volume:
      - /var/lib/registry/certs:/certs:z
      - /var/lib/registry/data:/var/lib/registry:z
      - /var/lib/registry/auth:/auth:z
      - /var/lib/registry/config/config.yml:/etc/docker/registry/config.yml:z
    restart_policy: always
    conmon_pidfile: /run/registry.pid
    log_options: max_size=100mb
  become: true
  register: _registry_container_created
  notify: _restart_registry

- name: create systemd registry file
  shell: |
    podman generate systemd --name registry > /etc/systemd/system/registry.service 
  become: true
  when: _registry_container_created.changed
  notify: _restart_registry

- name: create registry-ui container
  containers.podman.podman_container:
    name: registry-ui
    pod: registrypod
    image: "{{_image_registry_url}}{{_docker_registry_ui_image.image}}"
    state: present
    env:
      NGINX_PROXY_PASS_URL: https://registry.bachstraat20.duckdns.org:5000
      SINGLE_REGISTRY: true
      DELETE_IMAGES: true
      REGISTRY_TITLE: "Bachstraat20"
    restart_policy: always
    conmon_pidfile: /run/registry-ui.pid
    log_options: max_size=100mb
  become: true
  register: _registry_ui_container_created
  notify: _restart_registry_ui

- name: create systemd registry file
  shell: |
    podman generate systemd --name registry-ui > /etc/systemd/system/registry-ui.service 
  become: true
  when: _registry_ui_container_created.changed
  notify: _restart_registry_ui

- name: create haproxy container
  containers.podman.podman_container:
    name: haproxy
    pod: registrypod
    state: started
    image: "{{_image_registry_url}}{{_haproxy_image.image}}"
    debug: true
    privileged: true
    volume:
      - /var/lib/registry/haproxy/haproxy.cfg:/usr/local/etc/haproxy/haproxy.cfg
      - /var/lib/registry/haproxy/{{ _registry_fqdn }}-crt-key.pem:/{{ _registry_fqdn }}-crt-key.pem
    conmon_pidfile: /run/haproxy.pid
    restart_policy: always
    log_options: max_size=100mb
  become: true
  register: _haproxy_container_created
  notify: _restart_haproxy

- name: create systemd haproxy file
  shell: |
    podman generate systemd --name haproxy > /etc/systemd/system/registry-haproxy.service
  become: true
  when: _haproxy_container_created.changed
  notify: _restart_haproxy

- name: trigger handelers
  meta: flush_handlers

- name: containers state
  shell: |
    podman ps -a --format "{{ '{{' }}.Status{{ '}}' }}  {{ '{{' }}.Names{{ '}}' }}  {{ '{{' }}.ID{{ '}}' }}" --filter 'name={{item}}'
  register: _containers_state
  become: true
  with_items:
    - registry
    - registry-ui
    - haproxy

- debug:
    var: _containers_state

